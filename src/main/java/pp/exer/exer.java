package pp.exer;

/**
 * Created by pkpm on 2019/9/11
 */
public class exer {
    /**
     * 1. 猫狗队列
     *
     * 可以用add方法将猫或狗加入队列；
     * 可以用pollAll方法，将队列中所有实例按照先后顺序输出；
     * pollDog，将dog的实例按照先后顺序输出；
     * pollCat
     * isEmpty
     * isDogEmpty
     * isCatEmpty
     *
     *
     * 方案：使用两个队列，每个实例根据入队的先后顺序加一个索引或时间戳记录一下
     */
    /**
     * 2. 转圈打印矩阵，额外空间复杂度O(1)
     *  知道左上和右下可打印一圈，打印一圈后，左上角向右下移动，右下角向左上移动
     */
    /**
     * 3. 正方形矩阵旋转90度，额外空间O(1)
     *
     * 根据左上和右下确定一圈，每圈旋转
     */
    /**
     * 4. 之字打印矩阵，额外空间O(1)
     *
     *  分解为打印对角线的值
     *  确定对角线借助两个点A，B：A像右走，到最后一个向下；B向下走，到最下一个向右
     */
    /**
     * 5. 在排好序的矩阵中查找数
     * 矩阵matrix的每一行、每一列都是排好序的，判断k是否在矩阵中
     * 时间复杂度O(N+M),空间复杂度O(1)
     *
     * 从左下或右上开始遍历
     */
    /**
     * 哈希函数：
     *      ① 输入域是无穷大的
     *      ② 输出域是有限的
     *      ③ 相同的输入，输出是一样的
     *      ④ 不同的输入，可能会有相同的输出(碰撞)
     *      ⑤ 散列性
     */
    /**
     * 6. 布隆过滤器(存在失误率)
     * 假设有一个100亿个URL的黑名单，来一个URL，判断是否在黑名单中
     *   准备一个长度为m的bit数组，k 个哈希函数，100亿个URL经过k个哈希函数，然后%m，得到k个值，然后将bit数组中的这k个位置置1.
     *   判断的过程同上，判断URL对应的 k个位置是否都是1。
     *
     *   int[] arr = new it[10];
     *   bit数组中第i个位置置1：arr[i/32] | (1 << (i%32))   i/32:来自第几个整数    i%32:是该整数的第几位
     *   取出第i个位置的值：arr[i/32] & (1 << (i%32)),如果得到0，则是0,；得到1，则是1.
     * m 的设置取决于样本大小和失误率多少
     */

}
